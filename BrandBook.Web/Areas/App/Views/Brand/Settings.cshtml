@model BrandBook.Web.Framework.ViewModels.App.Brand.Settings.BrandSettingsViewModel
@{
    ViewBag.Title = "Settings";
}

@section navigation {
    @Html.Partial("~/Areas/App/Views/Shared/Layout/Partial/_BrandNavigation.cshtml")
}

@section styles {
    @Styles.Render("~/Content/Plugins/SweetAlerts")
}


<div class="row">
    <div class="col-md-12">
        <div class="card-box">
            <h4 class="header-title m-t-0 m-b-30">Brand Settings</h4>

            <ul class="nav nav-tabs tabs-bordered nav-justified">
                <li class="nav-item">
                    <a href="#general-settings" data-toggle="tab" aria-expanded="false" class="nav-link active">
                        General Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#contact-settings" data-toggle="tab" aria-expanded="true" class="nav-link">
                        Contact Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#customizing-settings" data-toggle="tab" aria-expanded="true" class="nav-link">
                        Customizing Brand
                    </a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="general-settings">
                    <p>
                        @using (Html.BeginForm("UpdateGeneralSettings", "Brand", new { area = "App" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            @Html.AntiForgeryToken()
                         
                            @Html.HiddenFor(m => m.Id, new { @Value = Model.Id})

                            <div class="form-group clearfix">
                                @Html.LabelFor(m => m.GeneralSettingsViewModel.Name, new { @class = "control-label" })
                                <div class="">
                                    @Html.TextBoxFor(m => m.GeneralSettingsViewModel.Name, new { @Value = Model.GeneralSettingsViewModel.Name, @class = "form-control", placeholder = Html.DisplayNameFor(m => m.GeneralSettingsViewModel.Name) })
                                    @Html.ValidationMessageFor(m => m.GeneralSettingsViewModel.Name, "", new { @class = "text-danger"})
                                </div>
                            </div>


                            <div class="form-group clearfix">
                                @Html.LabelFor(m => m.GeneralSettingsViewModel.MainHexColor, new { @class = "col-form-label" })
                                <div class="">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="mainColorInput">#</span>
                                        </div>
                                        @Html.TextBoxFor(m => m.GeneralSettingsViewModel.MainHexColor, new { @Value = Model.GeneralSettingsViewModel.MainHexColor, @class = "form-control", placeholder = Html.DisplayNameFor(m => m.GeneralSettingsViewModel.MainHexColor) })
                                        @Html.ValidationMessageFor(m => m.GeneralSettingsViewModel.MainHexColor, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group mt-5">
                                <button type="submit" class="btn btn-primary btn-custom">
                                    <i class="fas fa-save"></i>
                                    &nbsp;
                                    Speichern
                                </button>
                            </div>
                        }
                    </p>
                </div>
                

                <div class="tab-pane" id="contact-settings">
                    <p>
                        @using (Html.BeginForm("UpdateContactSettings", "Brand", new { area = "App" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            @Html.AntiForgeryToken()

                            @Html.HiddenFor(m => m.Id, new { @Value = Model.Id })

                            <div class="form-group clearfix">
                                @Html.LabelFor(m => m.ContactSettingsViewModel.ContactPerson, new { @class = "col-form-label" })
                                <div class="">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="mainColorInput">@@</span>
                                        </div>
                                        @Html.TextBoxFor(m => m.ContactSettingsViewModel.ContactPerson, new { @Value = Model.ContactSettingsViewModel.ContactPerson, @class = "form-control", placeholder = Html.DisplayNameFor(m => m.ContactSettingsViewModel.ContactPerson) })
                                        @Html.ValidationMessageFor(m => m.ContactSettingsViewModel.ContactPerson, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group mt-5">
                                <button type="submit" class="btn btn-primary btn-custom">
                                    <i class="fas fa-save"></i>
                                    &nbsp;
                                    Speichern
                                </button>
                            </div>
                        }
                    </p>
                </div>
                

                <div class="tab-pane" id="customizing-settings">
                    <p>
                        @using (Html.BeginForm("UpdateContactSettings", "Brand", new { area = "App" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            @Html.AntiForgeryToken()

                            @Html.HiddenFor(m => m.Id, new { @Value = Model.Id })

                            <div class="form-group clearfix">
                                @Html.LabelFor(m => m.ContactSettingsViewModel.ContactPerson, new { @class = "col-form-label" })
                                <div class="">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="mainColorInput">@@</span>
                                        </div>
                                        @Html.TextBoxFor(m => m.ContactSettingsViewModel.ContactPerson, new { @Value = Model.ContactSettingsViewModel.ContactPerson, @class = "form-control", placeholder = Html.DisplayNameFor(m => m.ContactSettingsViewModel.ContactPerson) })
                                        @Html.ValidationMessageFor(m => m.ContactSettingsViewModel.ContactPerson, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group mt-5">
                                <button type="submit" class="btn btn-primary btn-custom">
                                    <i class="fas fa-save"></i>
                                    &nbsp;
                                    Speichern
                                </button>
                            </div>
                        }
                    </p>
                </div>
                

            </div>
        </div>
    </div> <!-- end col -->
</div>




<div class="row">
    <div class="col-12">
        <div class="card-box" style="background-color: #f8d7da">

            <h4 class="header-title m-t-0 m-b-30">Danger Zone</h4>

            <div class="form-group row mt-5 mb-0">

                <a href="#" class="btn btn-warning btn-custom mr-2">
                    <i class="fab fa-galactic-republic"></i>
                    &nbsp;
                    Make public
                </a>


                <a href="@Url.Action("Delete", "Brand", new {id = ViewBag.BrandId, area = "App"})" class="btn btn-danger btn-custom mr-2">
                    <i class="fas fa-trash"></i>
                    &nbsp;
                    Delete
                </a>
                <!--
    <button class="btn btn-danger btn-custom mr-2" id="delete-warning">
        <i class="fas fa-trash"></i>
        &nbsp;
        Delete
    </button>
    -->
            </div>

        </div>
    </div>
</div>


@section scripts {
    @Scripts.Render("~/bundles/Plugins/SweetAlerts")


    <script>

        !function($) {
            "use strict";

                var SweetAlert = function() {
                };

                SweetAlert.prototype.init = function() {


                        //Deletion Warning Message
                        $('#delete-warning').click(function() {
                            swal({
                                title: "Delete this Brand?", 
                                text: "Are you sure that you want to delete this member?", 
                                type: "warning",
                                showCancelButton: true,
                                confirmButtonText: "Yes, delete it!",
                                confirmButtonColor: "#ec6c62"
                            }, function() {
                                $.ajax({
                                        url:  "/App/Brand/Delete/" + @ViewBag.BrandId,
                                        type: "DELETE"
                                    })
                                    .done(function(data) {
                                        swal({
                                            title: "Deleted", 
                                            text: "Brand has been successfully deleted", 
                                            type: "success"
                                        },function() {
                                            location.reload();
                                        });
                                    })
                                    .error(function(data) {
                                        swal("Oops", "We couldn't connect to the server!", "error");
                                    });
                            });
                        });

                    },
                    //init
                    $.SweetAlert = new SweetAlert, $.SweetAlert.Constructor = SweetAlert;
            }(window.jQuery),

            //initializing
            function($) {
                "use strict";
                $.SweetAlert.init()
            }(window.jQuery);
    </script>

}